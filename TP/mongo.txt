//////// VERSAO 2 //////// 
// NOVA Query #1 == SQL EXTRA #1 (Salarios medios p/departamento)
db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$group: {_id: "$DEPARTMENT_NAME", Media_Salario: {$avg: "$EMPLOYEES.SALARY"}}},
  {$sort: {"Media_Salario": -1}},
  {$project: {_id: 0, Departamento: "$_id", Media_Salario: {$round: ["$Media_Salario",2]}}}
]).pretty()

// Query #2 
// $match só serve para o caso em que a região é nula
// $addFields é só estética
// a parte "_id: 0, Regiao: "$_id"" do $project também é só estética 
db.departments.aggregate([
  {$match: {"LOCATION.REGION": {"$exists": true, "$ne": null}} },
  {$unwind: "$EMPLOYEES"},
  {$addFields: {Nome: {$concat: ["$EMPLOYEES.FIRST_NAME", " ", "$EMPLOYEES.LAST_NAME"]}} },
  {$sort: {"EMPLOYEES.HIRE_DATE": 1,"Nome": 1} },
  {$group: { _id: "$LOCATION.REGION", Top5: {$push: {Nome:"$Nome", Data_Inicio:"$EMPLOYEES.HIRE_DATE"}}} },
  {$project: {_id: 0, Regiao: "$_id", Top5:{$slice:["$Top5", 5]}} }
]).pretty()

// Query #3
// tem aqui um pequeno problema porque nao existe o MONTHS_BETWEEN
db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$match: {"EMPLOYEES.EMPLOYEE_ID": 176} },
  {$unwind: "$EMPLOYEES.JOB_HISTORY"},
  {$project: {_id: 0, Emprego:"$EMPLOYEES.JOB_HISTORY.JOB.JOB_TITLE", DataInicial: "$EMPLOYEES.JOB_HISTORY.START_DATE", DataFinal: "$EMPLOYEES.JOB_HISTORY.END_DATE",Faturado: {$round: [{$multiply: [{$divide: [{$subtract: ["$EMPLOYEES.JOB_HISTORY.END_DATE", "$EMPLOYEES.JOB_HISTORY.START_DATE"]}, 1000*60*60*24*30]}, "$EMPLOYEES.JOB_HISTORY.JOB.MAX_SALARY"]},2]}} }, 
  {$sort: {"Faturado": -1}},
  {$limit: 1}
]).pretty()

// Query Extra #1
// Numero de empregados por localizaçao
// $match para remover a location vazia num dos registos
db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$match: {"LOCATION": {"$ne": {}}} },
  {$group: { _id: "$LOCATION", Total: {$sum: 1}}},
  {$sort: {"Total": -1}},
  {$project: {_id: 0, Localizacao: "$_id", Total: "$Total"}}
]).pretty()

// Query Extra #2
// Maior Salário em cada região
// $match para remover a regiao vazia num dos registos
db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$match: {"LOCATION.REGION": {"$exists": true, "$ne": null}} },
  {$group: { _id: "$LOCATION.REGION", Maximo: {$max: "$EMPLOYEES.SALARY"}}},
  {$sort: {"Maximo": -1}},
  {$project: {_id: 0, Regiao: "$_id", Maximo: "$Maximo"}}
]).pretty()




//////// VERSAO 1 ////////
// Query #2 
// $match só serve para o caso em que a região é nula
// $addFields é só estética
// a parte "_id: 0, Regiao: "$_id"" do $project também é só estética 
 
db.employees.aggregate([
  {$match: {"DEPARTMENT.LOCATION.REGION": {"$exists": true, "$ne": null}} },
  {$addFields: {Nome: {$concat: ["$FIRST_NAME", " ", "$LAST_NAME"]}} },
  {$sort: {"HIRE_DATE": 1,"Nome": 1} },
  {$group: { _id: "$DEPARTMENT.LOCATION.REGION", Top5: {$push: {Nome:"$Nome", Data_Inicio:"$HIRE_DATE"}}} },
  {$project: {_id: 0, Regiao: "$_id", Top5:{$slice:["$Top5", 5]}} }
]).pretty()

// Query #3
// tem aqui um pequeno problema porque nao existe o MONTHS_BETWEEN
db.employees.aggregate([
  {$match: {"EMPLOYEE_ID": 176} },
  {$unwind: "$JOB_HISTORY"},
  {$project: {_id: 0, Emprego:"$JOB_HISTORY.JOB.JOB_TITLE", DataInicial: "$JOB_HISTORY.START_DATE", DataFinal: "$JOB_HISTORY.END_DATE",Faturado: {$multiply: [{$divide: [{$subtract: ["$JOB_HISTORY.END_DATE", "$JOB_HISTORY.START_DATE"]}, 1000*60*60*24*30]}, "$JOB_HISTORY.JOB.MAX_SALARY"]}} }, 
  {$sort: {"Faturado": -1}},
  {$limit: 1}
]).pretty()

// Query Extra #1
// Numero de empregados por localizaçao
// $match para remover a location vazia num dos registos
db.employees.aggregate([
  {$match: {"DEPARTMENT.LOCATION": {"$ne": {}}} },
  {$group: { _id: "$DEPARTMENT.LOCATION", Total: {$sum: 1}}},
  {$sort: {"Total": -1}},
  {$project: {_id: 0, Localizacao: "$_id", Total: "$Total"}}
]).pretty()

// Query Extra #2
// Maior Salário em cada região
// $match para remover a regiao vazia num dos registos
db.employees.aggregate([
  {$match: {"DEPARTMENT.LOCATION.REGION": {"$exists": true, "$ne": null}} },
  {$group: { _id: "$DEPARTMENT.LOCATION.REGION", Maximo: {$max: "$SALARY"}}},
  {$sort: {"Maximo": -1}},
  {$project: {_id: 0, Regiao: "$_id", Maximo: "$Maximo"}}
]).pretty()





//////// LIXO ////////

// Query 1
// Esta parte dá me os que trabalham no mesmo departamento que o 101
db.departments.aggregate([
  {$match: {"EMPLOYEES": {$elemMatch: {"EMPLOYEE_ID": 101}}}},
  {$unwind: "$EMPLOYEES"},
  {$project: {_id: 0, ID: "$EMPLOYEES.EMPLOYEE_ID", Nome: {$concat: ["$EMPLOYEES.FIRST_NAME", " ", "$EMPLOYEES.LAST_NAME"]}}},
  {$match: {"ID": {$nin: [101]}}}
]).pretty()

// Este dá me os departamentos que o 101 já trabalhou sem ser o atual
db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$unwind: "$EMPLOYEES.JOB_HISTORY"},
  {$match: {"EMPLOYEES.JOB_HISTORY.DEPARTMENT_ID": {$nin: ["$DEPARTMENT_ID"]}, "EMPLOYEES.EMPLOYEE_ID": {$in: [101]}}},
  {$group: {_id: "$EMPLOYEES.JOB_HISTORY.DEPARTMENT_ID"}},
  {$project: {_id: 0, Departamento: "$_id"}}
]).pretty()

db.departments.aggregate([
  {$unwind: "$EMPLOYEES"},
  {$unwind: "$EMPLOYEES.JOB_HISTORY"},
  {$group: {_id: "$EMPLOYEES.JOB_HISTORY.DEPARTMENT_ID", Trabalharam: {$push: {ID:"$EMPLOYEES.EMPLOYEE_ID" ,Nome: {$concat: ["$EMPLOYEES.FIRST_NAME", " ", "$EMPLOYEES.LAST_NAME"]}}}}}
]).pretty()

  {$project: _id: 0, Departamento: "$_id",Nome: {$concat: ["$EMPLOYEES.FIRST_NAME", " ", "$EMPLOYEES.LAST_NAME"]} }

db.departments.aggregate([
  {$facet: {
    "Departamento_Atual": [
      {$match: {"EMPLOYEES": {$elemMatch: {"EMPLOYEE_ID": 101}}}},
      {$unwind: "$EMPLOYEES"},
      {$project: {_id: 0, ID: "$EMPLOYEES.EMPLOYEE_ID", Nome: {$concat: ["$EMPLOYEES.FIRST_NAME", " ", "$EMPLOYEES.LAST_NAME"]}}},
      {$match: {"ID": {$nin: [101]}}}
    ],
    "Departamentos_Anteriores": [
      {$unwind: "$EMPLOYEES"},
      {$unwind: "$EMPLOYEES.JOB_HISTORY"},
      {$match: {"EMPLOYEES.JOB_HISTORY.DEPARTMENT_ID": {$nin: ["$DEPARTMENT_ID"]}   , "EMPLOYEES.EMPLOYEE_ID": {$in: [101]}}},
      {$group: {_id: "$EMPLOYEES.JOB_HISTORY.DEPARTMENT_ID"}},
      {$project: {_id: 0, Departamento: "$_id"}}
    ]
  }}
]).pretty()

  {$match: {"DEPARTMENT_ID": {$in: ["$Departamentos_Anteriores.Departamento"]}}}

//////////////////////////////////////////////////////////////////